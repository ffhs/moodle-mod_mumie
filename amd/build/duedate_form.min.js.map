{"version":3,"file":"duedate_form.min.js","sources":["../src/duedate_form.js"],"sourcesContent":["define(['jquery', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/yui'],\n    function($, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\n\n        var MumieDueDate = function(selector, contextid, formdata) {\n            this.contextid = contextid;\n            this.init(selector, formdata);\n        };\n\n        MumieDueDate.prototype.modal = null;\n\n        MumieDueDate.prototype.contextid = -1;\n\n        MumieDueDate.prototype.init = function(selector, formdata) {\n            var triggers = $(selector);\n            return Str.get_string('mumie_duedate_form', 'mod_mumie').then(function(title) {\n                // Create the modal.\n                return ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: title,\n                    body: this.getBody(formdata)\n                }, triggers);\n            }.bind(this)).then(function(modal) {\n                // Keep a reference to the modal.\n                this.modal = modal;\n\n                // Forms are big, we want a big modal.\n                this.modal.setLarge();\n\n                // We want to reset the form every time it is opened.\n                this.modal.getRoot().on(ModalEvents.hidden, function() {\n                    this.modal.setBody(this.getBody(formdata));\n                }.bind(this));\n\n                // We catch the modal save event, and use it to submit the form inside the modal.\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                this.modal.getRoot().on(ModalEvents.save, this.submitForm.bind(this));\n                // We also catch the form submit event and use it to submit the form with ajax.\n                this.modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this));\n\n                return this.modal;\n\n            }.bind(this));\n        };\n\n        /**\n         * @method getBody\n         * @private\n         * @param {Object} formdata\n         * @return {Promise}\n         */\n        MumieDueDate.prototype.getBody = function(formdata) {\n            if (typeof formdata === \"undefined\") {\n                formdata = {};\n            }\n            // Get the content of the modal.\n            var params = {\n                jsonformdata: JSON.stringify(formdata)\n            };\n            return Fragment.loadFragment('mod_mumie', 'new_duedate_form', this.contextid, params);\n        };\n\n        /**\n         * @method handleFormSubmissionResponse\n         * @private\n         */\n        MumieDueDate.prototype.handleFormSubmissionResponse = function() {\n            this.modal.hide();\n            // We could trigger an event instead.\n            // Yuk.\n            Y.use('moodle-core-formchangechecker', function() {\n                M.core_formchangechecker.reset_form_dirty_state();\n            });\n\n            document.location.reload();\n        };\n\n        /**\n         * @method handleFormSubmissionFailure\n         * @private\n         * @param {Object} data\n         */\n        MumieDueDate.prototype.handleFormSubmissionFailure = function(data) {\n            // Oh noes! Epic fail :(\n            // Ah wait - this is normal. We need to re-display the form with errors!\n            this.modal.setBody(this.getBody(data));\n        };\n\n        /**\n         * Private method\n         *\n         * @method submitFormAjax\n         * @private\n         * @param {Event} e Form submission event.\n         */\n        MumieDueDate.prototype.submitFormAjax = function(e) {\n            // We don't want to do a real form submission.\n            e.preventDefault();\n\n            // Convert all the form elements values to a serialized string.\n            var formData = this.modal.getRoot().find('form').serialize();\n            // Now we can continue...\n            Ajax.call([{\n                methodname: 'mod_mumie_submit_mumieduedate_form',\n                args: {\n                    contextid: this.contextid,\n                    jsonformdata: JSON.stringify(formData)\n                },\n                done: this.handleFormSubmissionResponse.bind(this, formData),\n                fail: this.handleFormSubmissionFailure.bind(this, formData)\n            }]);\n        };\n\n        /**\n         * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n         *\n         * @method submitForm\n         * @param {Event} e Form submission event.\n         * @private\n         */\n        MumieDueDate.prototype.submitForm = function(e) {\n            e.preventDefault();\n            this.modal.getRoot().find('form').submit();\n        };\n\n        return /** @alias module:mod_mumie/newduedate */ {\n            // Public variables and functions.\n            /**\n             * Attach event listeners to initialize this module.\n             *\n             * @method init\n             * @param {string} selector The CSS selector used to find nodes that will trigger this module.\n             * @param {int} contextid The contextid for the course.\n             * @param {Object} formdata\n             * @return {Promise}\n             */\n            init: function(selector, contextid, formdata) {\n                return new MumieDueDate(selector, contextid, formdata);\n            }\n        };\n\n    });"],"names":["define","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","MumieDueDate","selector","contextid","formdata","this","init","prototype","modal","triggers","get_string","then","title","create","type","types","SAVE_CANCEL","body","getBody","bind","setLarge","getRoot","on","hidden","setBody","save","submitForm","submitFormAjax","params","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","hide","use","M","core_formchangechecker","reset_form_dirty_state","document","location","reload","handleFormSubmissionFailure","data","e","preventDefault","formData","find","serialize","call","methodname","args","done","fail","submit"],"mappings":"AAAAA,OAAO,yBAAA,CAAC,SAAU,WAAY,qBAAsB,oBAAqB,gBAAiB,YAAa,aACnG,SAASC,EAAGC,IAAKC,aAAcC,YAAaC,SAAUC,KAAMC,GAEpDC,IAAAA,aAAe,SAASC,SAAUC,UAAWC,UACxCD,KAAAA,UAAYA,UACjBE,KAAKC,KAAKJ,SAAUE,WAuHyB,OApHjDH,aAAaM,UAAUC,MAAQ,KAE/BP,aAAaM,UAAUJ,WAAa,EAEpCF,aAAaM,UAAUD,KAAO,SAASJ,SAAUE,UAC7C,IAAIK,SAAWf,EAAEQ,UACjB,OAAOP,IAAIe,WAAW,qBAAsB,aAAaC,KAAK,SAASC,OAE5DhB,OAAAA,aAAaiB,OAAO,CACvBC,KAAMlB,aAAamB,MAAMC,YACzBJ,MAAOA,MACPK,KAAMZ,KAAKa,QAAQd,WACpBK,WACLU,KAAKd,OAAOM,KAAK,SAASH,OAkBxB,OAhBKA,KAAAA,MAAQA,MAGRA,KAAAA,MAAMY,WAGNZ,KAAAA,MAAMa,UAAUC,GAAGzB,YAAY0B,OAAQ,WACnCf,KAAAA,MAAMgB,QAAQnB,KAAKa,QAAQd,YAClCe,KAAKd,OAIPA,KAAKG,MAAMa,UAAUC,GAAGzB,YAAY4B,KAAMpB,KAAKqB,WAAWP,KAAKd,OAE/DA,KAAKG,MAAMa,UAAUC,GAAG,SAAU,OAAQjB,KAAKsB,eAAeR,KAAKd,OAE5DA,KAAKG,OAEdW,KAAKd,QASXJ,aAAaM,UAAUW,QAAU,SAASd,eACd,IAAbA,WACPA,SAAW,IAGf,IAAIwB,OAAS,CACTC,aAAcC,KAAKC,UAAU3B,WAEjC,OAAON,SAASkC,aAAa,YAAa,mBAAoB3B,KAAKF,UAAWyB,SAOlF3B,aAAaM,UAAU0B,6BAA+B,WAC7CzB,KAAAA,MAAM0B,OAGXlC,EAAEmC,IAAI,iCAAiC,WACnCC,EAAEC,uBAAuBC,4BAG7BC,SAASC,SAASC,UAQtBxC,aAAaM,UAAUmC,4BAA8B,SAASC,MAGrDnC,KAAAA,MAAMgB,QAAQnB,KAAKa,QAAQyB,QAUpC1C,aAAaM,UAAUoB,eAAiB,SAASiB,GAE7CA,EAAEC,iBAGF,IAAIC,SAAWzC,KAAKG,MAAMa,UAAU0B,KAAK,QAAQC,YAEjDjD,KAAKkD,KAAK,CAAC,CACPC,WAAY,qCACZC,KAAM,CACFhD,UAAWE,KAAKF,UAChB0B,aAAcC,KAAKC,UAAUe,WAEjCM,KAAM/C,KAAK4B,6BAA6Bd,KAAKd,KAAMyC,UACnDO,KAAMhD,KAAKqC,4BAA4BvB,KAAKd,KAAMyC,cAW1D7C,aAAaM,UAAUmB,WAAa,SAASkB,GACzCA,EAAEC,iBACGrC,KAAAA,MAAMa,UAAU0B,KAAK,QAAQO,UAGW,CAW7ChD,KAAM,SAASJ,SAAUC,UAAWC,UACzB,OAAA,IAAIH,aAAaC,SAAUC,UAAWC"}