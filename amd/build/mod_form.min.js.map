{"version":3,"file":"mod_form.min.js","sources":["../src/mod_form.js"],"sourcesContent":["define(['jquery', 'core/templates', 'core/modal_factory', 'auth_mumie/mumie_server_config', 'core/ajax'],\n    function() {\n        const addServerButton = document.getElementById(\"id_add_server_button\");\n        const missingConfig = document.getElementsByName(\"mumie_missing_config\")[0];\n        let lmsSelectorUrl;\n        let systemLanguage;\n        const serverController = (function() {\n            let serverStructure;\n            const serverDropDown = document.getElementById(\"id_server\");\n\n            return {\n                init: function(structure) {\n                    serverStructure = structure;\n                },\n                getSelectedServer: function() {\n                    const selectedServerName = serverDropDown.options[serverDropDown.selectedIndex].text;\n                    return serverStructure.find(server => server.name === selectedServerName);\n                },\n                disable: function() {\n                    serverDropDown.disabled = true;\n                    removeChildElems(serverDropDown);\n                }\n            };\n        })();\n\n        const problemSelectorController = (function() {\n            const problemSelectorButton = document.getElementById('id_prb_selector_btn');\n            const multiProblemSelectorButton = document.getElementById('id_multi_problem_selector_btn');\n            let problemSelectorWindow;\n            const mumieOrg = document.getElementsByName('mumie_org')[0].value;\n\n            /**\n             * Send a message to the problem selector window.\n             *\n             * Don't do anything if there is no problem selector window.\n             * @param {Object} response\n             */\n            function sendResponse(response) {\n                if (!problemSelectorWindow) {\n                    return;\n                }\n                problemSelectorWindow.postMessage(JSON.stringify(response), lmsSelectorUrl);\n            }\n\n            /**\n             * Send a success message to problem selector window\n             * @param {string} message\n             */\n            function sendSuccess(message = '') {\n                sendResponse({\n                    success: true,\n                    message: message\n                });\n            }\n\n            /**\n             * Send a failure message to problem selector window\n             * @param {string} message\n             */\n            function sendFailure(message = '') {\n                sendResponse({\n                    success: false,\n                    message: message\n                });\n            }\n\n            /**\n             * Add an event listener that accepts messages from LMS-Browser and updates the selected problem.\n             */\n            function addMessageListener() {\n                window.addEventListener('message', (event) => {\n                    if (event.origin !== lmsSelectorUrl) {\n                        return;\n                    }\n                    const importObj = JSON.parse(event.data);\n                    const isGraded = importObj.isGraded !== false;\n                    const worksheet = importObj.worksheet ?? null;\n                    try {\n                        courseController.setCourse(importObj.path_to_coursefile);\n                        langController.setLanguage(importObj.language);\n                        taskController.setSelection(importObj.link, importObj.language, importObj.name);\n                        taskController.setIsGraded(isGraded);\n                        worksheetController.setWorksheet(worksheet);\n                        sendSuccess();\n                        window.focus();\n                        displayProblemSelectedMessage();\n                    } catch (error) {\n                        sendFailure(error.message);\n                    }\n                  }, false);\n            }\n\n            /**\n             * Display a success message in Moodle that a problem was successfully selected.\n             */\n            function displayProblemSelectedMessage() {\n                require(['core/str', \"core/notification\"], function(str, notification) {\n                    str.get_strings([{\n                        'key': 'mumie_form_updated_selection',\n                        component: 'mod_mumie'\n                    }]).done(function(s) {\n                        notification.addNotification({\n                            message: s[0],\n                            type: \"info\"\n                        });\n                    }).fail(notification.exception);\n                });\n            }\n\n            /**\n             * Builds the URL to the Problem Selector\n             * @returns {string} URL to the Problem Selector\n             */\n            function buildURL() {\n                const gradingType = taskController.getGradingType();\n                const selection = taskController.getDelocalizedTaskLink();\n                const selectedServer = serverController.getSelectedServer().urlprefix;\n                const useSSO = shouldUseSSO(lmsSelectorUrl, selectedServer);\n                if (useSSO) {\n                    return '/auth/mumie/problem_selector.php?'\n                        + 'org='\n                        + mumieOrg\n                        + '&serverUrl='\n                        + encodeURIComponent(selectedServer)\n                        + '&problemLang='\n                        + langController.getSelectedLanguage()\n                        + '&origin=' + encodeURIComponent(window.location.origin)\n                        + '&gradingType=' + gradingType\n                        + (selection ? '&selection=' + selection : '');\n                }\n                return lmsSelectorUrl\n                    + '/lms-problem-selector?'\n                    + 'org='\n                    + mumieOrg\n                    + '&serverUrl='\n                    + encodeURIComponent(selectedServer)\n                    + '&problemLang='\n                    + langController.getSelectedLanguage()\n                    + '&origin=' + encodeURIComponent(window.location.origin)\n                    + '&uiLang=' + systemLanguage\n                    + '&gradingType=' + gradingType\n                    + '&multiCourse=true'\n                    + '&worksheet=true'\n                    + (selection ? '&selection=' + selection : '');\n            }\n\n            /**\n             * Determines whether the Single Sign-On (SSO) should be used when opening the Problem Selector.\n             * SSO is only supposed to be used when the Problem Selector URL has the same origin as the\n             * URL of the selected MUMIE server.\n             *\n             * @param {string} problemSelectorUrl - The URL of the problem selector.\n             * @param {string} selectedServerUrl - The URL of the selected MUMIE server\n             * @returns {boolean} Whether SSO should be used for the Problem Selector or not\n             */\n            function shouldUseSSO(problemSelectorUrl, selectedServerUrl) {\n                return new URL(problemSelectorUrl).origin === new URL(selectedServerUrl).origin;\n            }\n\n            return {\n                init: function() {\n                    problemSelectorButton.onclick = function() {\n                        problemSelectorWindow = window.open(buildURL(), '_blank');\n                    };\n\n                    window.onclose = function() {\n                        sendSuccess();\n                    };\n\n                    window.addEventListener(\"beforeunload\", function() {\n                        sendSuccess();\n                     }, false);\n\n                    addMessageListener();\n\n                    multiProblemSelectorButton.onclick = function(e) {\n                        e.preventDefault();\n                        problemSelectorWindow = window.open(\n                          lmsSelectorUrl\n                          + '/lms-problem-selector?'\n                          + \"serverUrl=\"\n                          + encodeURIComponent(serverController.getSelectedServer().urlprefix)\n                          + '&gradingType=all',\n                          \"_blank\",\n                          'toolbar=0,location=0,menubar=0'\n                        );\n                    };\n                },\n                disable: function() {\n                    problemSelectorButton.disabled = true;\n                }\n            };\n        })();\n\n        const courseController = (function() {\n            const courseNameElem = document.getElementById(\"id_mumie_course\");\n            const coursefileElem = document.getElementsByName(\"mumie_coursefile\")[0];\n\n\n            /**\n             * Update the hidden input field with the selected course's course file path\n             *\n             * @param {string} coursefile\n             */\n            function updateCoursefilePath(coursefile) {\n                coursefileElem.value = coursefile;\n                updateCourseName();\n            }\n\n            /**\n             * Update displayed course name.\n             */\n            function updateCourseName() {\n                const selectedCourse = courseController.getSelectedCourse();\n                const selectedLanguage = langController.getSelectedLanguage();\n                if (!selectedCourse || !selectedLanguage) {\n                    return;\n                }\n                courseNameElem.value = selectedCourse.name\n                    .find(translation => translation.language === selectedLanguage)?.value;\n            }\n\n            return {\n                init: function() {\n                    updateCourseName();\n                },\n                getSelectedCourse: function() {\n                    const courses = serverController.getSelectedServer().courses;\n                    return courses.find(course => course.coursefile === coursefileElem.value);\n                },\n                setCourse: function(courseFile) {\n                    updateCoursefilePath(courseFile);\n                }\n            };\n        })();\n\n        const langController = (function() {\n            const languageElem = document.getElementById(\"id_language\");\n            return {\n                getSelectedLanguage: function() {\n                    return languageElem.value;\n                },\n                setLanguage: function(lang) {\n                    languageElem.value = lang;\n                }\n            };\n        })();\n\n        const taskController = (function() {\n            const taskSelectionInput = document.getElementsByName(\"taskurl\")[0];\n            const nameElem = document.getElementById(\"id_name\");\n            const taskDisplayElement = document.getElementById(\"id_task_display_element\");\n            const isGradedElem = document.getElementById('id_mumie_isgraded');\n            const LANG_REQUEST_PARAM_PREFIX = \"?lang=\";\n\n            /**\n             * Update the activity's name in the input field\n             * @param {string} name\n             */\n            function updateName(name) {\n                nameElem.value = name;\n            }\n\n            /**\n             * @param {string} localizedLink\n             */\n            function updateTaskDisplayElemement(localizedLink) {\n                taskDisplayElement.value = localizedLink;\n            }\n\n            /**\n             * Update task uri\n             * @param {string} link\n             * @param {string} language\n             */\n            function updateTaskUri(link, language) {\n                const localizedLink = localizeLink(link, language);\n                taskSelectionInput.value = localizedLink;\n                updateTaskDisplayElemement(localizedLink);\n            }\n\n            /**\n             * Add lang request param to link\n             * @param {string} link\n             * @param {string} language\n             * @returns {string} Link with lang request param\n             */\n            function localizeLink(link, language) {\n                return link + LANG_REQUEST_PARAM_PREFIX + language;\n            }\n\n            /**\n             * Remove lang request param from link\n             * @param {string} link Link that may have lang request param\n             * @returns {string} Link without lang request param\n             */\n            function delocalizeLink(link) {\n                if (link.includes(LANG_REQUEST_PARAM_PREFIX)) {\n                    return link.split(LANG_REQUEST_PARAM_PREFIX)[0];\n                }\n                return link;\n            }\n\n            /**\n             * Form inputs related to grades should be disabled, if the MUMIE Task is not graded.\n             */\n            function updateGradeEditability() {\n                const disabled = isGradedElem.value === '0';\n                document.getElementById('id_points').disabled = disabled;\n                document.getElementById('id_gradepass').disabled = disabled;\n                document.getElementById('id_duedate_enabled').disabled = disabled;\n                document.getElementById('id_gradecat').disabled = disabled;\n            }\n\n            return {\n                init: function() {\n                    updateTaskDisplayElemement(taskSelectionInput.value);\n                },\n                setSelection: function(link, language, name) {\n                    updateTaskUri(link, language);\n                    updateName(name);\n                },\n                setIsGraded: function(isGraded) {\n                    if (isGraded === null) {\n                        isGradedElem.value = null;\n                    }\n                    isGradedElem.value = isGraded ? '1' : '0';\n                    updateGradeEditability();\n                },\n                getGradingType: function() {\n                    const isGraded = isGradedElem.value;\n                    if (isGraded === '1') {\n                        return 'graded';\n                    } else if (isGraded === '0') {\n                        return 'ungraded';\n                    }\n                    return 'all';\n                },\n                getDelocalizedTaskLink: function() {\n                    return delocalizeLink(taskSelectionInput.value);\n                }\n            };\n        })();\n\n\n        const multiTaskEditController = (function() {\n            const propertySelectionInputs = document.getElementsByName(\"mumie_multi_edit_property\");\n            const selectedTaskProperties = document.getElementsByName(\"mumie_selected_task_properties\")[0];\n            let selectedTaskProp = [];\n            const taskSelectionInputs = document.getElementsByName(\"mumie_multi_edit_task\");\n            const selectedTasks = document.getElementsByName(\"mumie_selected_tasks\")[0];\n            let selectedTaskIds = [];\n            const sectionInputs = document.getElementsByName(\"mumie_multi_edit_section\");\n\n            /**\n             * Push an element to an array, if it's not already included.\n             *\n             * @param {string[]} array\n             * @param {string} element\n             */\n            function pushIfNotExists(array, element) {\n                if (!array.includes(element)) {\n                    array.push(element);\n                }\n            }\n\n            /**\n             * Set selection listeners for other MUMIE Tasks in the course.\n             */\n            function setTaskSelectionListeners() {\n                taskSelectionInputs.forEach(function(checkbox) {\n                    checkbox.onchange = function() {\n                        if (!checkbox.checked) {\n                            selectedTaskIds = selectedTaskIds.filter(elem => elem !== checkbox.value);\n                        } else {\n                            selectedTaskIds.push(checkbox.value);\n                        }\n                        selectedTasks.value = JSON.stringify(selectedTaskIds);\n                    };\n                });\n            }\n\n            /**\n             * Set selection listeners for properties to apply to MUMIE Tasks in the course.\n             */\n            function setPropertySelectionListeners() {\n                propertySelectionInputs.forEach(function(checkbox) {\n                    checkbox.onchange = function() {\n                        if (!checkbox.checked) {\n                            selectedTaskProp = selectedTaskProp.filter(elem => elem !== checkbox.value);\n                        } else {\n                            selectedTaskProp.push(checkbox.value);\n                        }\n                        selectedTaskProperties.value = JSON.stringify(selectedTaskProp);\n                    };\n                });\n            }\n\n            /**\n             * Set selection listeners for entire section of MUMIE Tasks in the course\n             */\n            function setSectionSelectionListeners() {\n                sectionInputs.forEach(function(sectionCheckbox) {\n                    sectionCheckbox.onchange = function() {\n                        if (!sectionCheckbox.checked) {\n                            taskSelectionInputs.forEach(function(taskCheckbox) {\n                                if (taskCheckbox.getAttribute('section') === sectionCheckbox.value) {\n                                    taskCheckbox.checked = false;\n                                    selectedTaskIds = selectedTaskIds.filter(elem => taskCheckbox.value !== elem);\n                                }\n                            });\n                        } else {\n                            taskSelectionInputs.forEach(function(taskCheckbox) {\n                                if (taskCheckbox.getAttribute('section') === sectionCheckbox.value) {\n                                    taskCheckbox.checked = true;\n                                    pushIfNotExists(selectedTaskIds, taskCheckbox.value);\n                                }\n                            });\n                        }\n                        selectedTasks.value = JSON.stringify(selectedTaskIds);\n                    };\n                });\n            }\n\n            return {\n                init: function() {\n                    setTaskSelectionListeners();\n                    setPropertySelectionListeners();\n                    setSectionSelectionListeners();\n                },\n            };\n        })();\n\n        const worksheetController = (function() {\n            const worksheetElement = document.getElementById(\"id_mumie_worksheet\");\n            return {\n                setWorksheet: function(worksheet) {\n                    if (worksheet) {\n                        worksheetElement.setAttribute(\"value\", JSON.stringify(worksheet));\n                    } else {\n                        worksheetElement.removeAttribute(\"value\");\n                    }\n                }\n            };\n        })();\n\n        /**\n         *  Disable all dropdown menus and show notification\n         * @param {string} errorKey\n         */\n        function disableDropDownMenus(errorKey) {\n            require(['core/str', \"core/notification\"], function(str, notification) {\n                str.get_strings([{\n                    'key':  errorKey,\n                    component: 'mod_mumie'\n                }]).done(function(s) {\n                    notification.addNotification({\n                        message: s[0] + \"<b>\" + missingConfig.getAttribute(\"value\") + \"</b>\",\n                        type: \"problem\"\n                    });\n                }).fail(notification.exception);\n            });\n            serverController.disable();\n            problemSelectorController.disable();\n        }\n\n        return {\n            init: function(contextid, prbSelectorUrl, lang) {\n                lmsSelectorUrl = prbSelectorUrl;\n                systemLanguage = lang;\n                const isEdit = document.getElementById(\"id_name\").getAttribute('value');\n                const serverStructure = JSON.parse(document.getElementsByName('mumie_server_structure')[0].value);\n                if (isEdit && !serverConfigExists()) {\n                    disableDropDownMenus('mumie_form_missing_server');\n                } else if (!serverStructure.length) {\n                    disableDropDownMenus('mumie_form_no_server_conf');\n                } else {\n                    serverController.init(serverStructure);\n                    courseController.init();\n                    taskController.init();\n                    multiTaskEditController.init();\n                    problemSelectorController.init();\n                }\n                multiTaskEditController.init();\n                if (addServerButton) {\n                    require(['auth_mumie/mumie_server_config'], function(MumieServer) {\n                        MumieServer.init(addServerButton, contextid);\n                    });\n                }\n            }\n        };\n\n        /**\n         * Remove all child elements of a given html element\n         * @param {Object} elem\n         */\n        function removeChildElems(elem) {\n            while (elem.firstChild) {\n                elem.removeChild(elem.firstChild);\n            }\n        }\n\n        /**\n         * Check, if the flag for an existing config is set\n         * @returns {boolean}\n         */\n        function serverConfigExists() {\n            return document.getElementsByName(\"mumie_missing_config\")[0].getAttribute(\"value\") === \"\";\n        }\n    });\n"],"names":["define","addServerButton","document","getElementById","missingConfig","getElementsByName","lmsSelectorUrl","systemLanguage","serverController","serverStructure","serverDropDown","init","structure","getSelectedServer","selectedServerName","options","selectedIndex","text","find","server","name","disable","disabled","elem","firstChild","removeChild","removeChildElems","problemSelectorController","problemSelectorButton","multiProblemSelectorButton","problemSelectorWindow","mumieOrg","value","sendResponse","response","postMessage","JSON","stringify","sendSuccess","message","success","addMessageListener","window","addEventListener","event","origin","importObj","parse","data","isGraded","worksheet","courseController","setCourse","path_to_coursefile","langController","setLanguage","language","taskController","setSelection","link","setIsGraded","worksheetController","setWorksheet","focus","require","str","notification","get_strings","component","done","s","addNotification","type","fail","exception","error","sendFailure","buildURL","gradingType","getGradingType","selection","getDelocalizedTaskLink","selectedServer","urlprefix","selectedServerUrl","URL","encodeURIComponent","getSelectedLanguage","location","onclick","open","onclose","e","preventDefault","courseNameElem","coursefileElem","updateCourseName","selectedCourse","getSelectedCourse","selectedLanguage","translation","_selectedCourse$name$","courses","course","coursefile","courseFile","languageElem","lang","taskSelectionInput","nameElem","taskDisplayElement","isGradedElem","updateTaskDisplayElemement","localizedLink","updateTaskUri","localizeLink","updateName","updateGradeEditability","includes","split","multiTaskEditController","propertySelectionInputs","selectedTaskProperties","selectedTaskProp","taskSelectionInputs","selectedTasks","selectedTaskIds","sectionInputs","forEach","checkbox","onchange","checked","push","filter","sectionCheckbox","taskCheckbox","array","element","getAttribute","worksheetElement","setAttribute","removeAttribute","disableDropDownMenus","errorKey","contextid","prbSelectorUrl","isEdit","length","MumieServer"],"mappings":"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"}