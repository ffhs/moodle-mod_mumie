{"version":3,"file":"mod_form.min.js","sources":["../src/mod_form.js"],"sourcesContent":["define(['jquery', 'core/templates', 'core/modal_factory', 'auth_mumie/mumie_server_config', 'core/ajax'],\n    function() {\n        const addServerButton = document.getElementById(\"id_add_server_button\");\n        const missingConfig = document.getElementsByName(\"mumie_missing_config\")[0];\n        let lmsSelectorUrl;\n        let systemLanguage;\n        const serverController = (function() {\n            let serverStructure;\n            const serverDropDown = document.getElementById(\"id_server\");\n\n            return {\n                init: function(structure) {\n                    serverStructure = structure;\n                },\n                getSelectedServer: function() {\n                    const selectedServerName = serverDropDown.options[serverDropDown.selectedIndex].text;\n                    return serverStructure.find(server => server.name === selectedServerName);\n                },\n                disable: function() {\n                    serverDropDown.disabled = true;\n                    removeChildElems(serverDropDown);\n                },\n                getAllServers: function() {\n                    return serverStructure;\n                }\n            };\n        })();\n\n        const problemSelectorController = (function() {\n            const problemSelectorButton = document.getElementById('id_prb_selector_btn');\n            const multiProblemSelectorButton = document.getElementById('id_multi_problem_selector_btn');\n            let problemSelectorWindow;\n            const mumieOrg = document.getElementsByName('mumie_org')[0].value;\n\n            /**\n             * Send a message to the problem selector window.\n             *\n             * Don't do anything, if there is no problem selector window.\n             * @param {Object} response\n             */\n            function sendResponse(response) {\n                if (!problemSelectorWindow) {\n                    return;\n                }\n                problemSelectorWindow.postMessage(JSON.stringify(response), lmsSelectorUrl);\n            }\n\n            /**\n             * Send a success message to problem selector window\n             * @param {string} message\n             */\n            function sendSuccess(message = '') {\n                sendResponse({\n                    success: true,\n                    message: message\n                });\n            }\n\n            /**\n             * Send a failure message to problem selector window\n             * @param {string} message\n             */\n            function sendFailure(message = '') {\n                sendResponse({\n                    success: false,\n                    message: message\n                });\n            }\n\n            /**\n             * Add an event listener that accepts messages from LMS-Browser and updates the selected problem.\n             */\n            function addMessageListener() {\n                window.addEventListener('message', (event) => {\n                    if (event.origin !== lmsSelectorUrl) {\n                        return;\n                    }\n                    const importObj = JSON.parse(event.data);\n                    const isGraded = importObj.isGraded !== false;\n                    try {\n                        courseController.setCourse(importObj.path_to_coursefile);\n                        langController.setLanguage(importObj.language);\n                        taskController.setSelection(importObj.link + '?lang=' + importObj.language);\n                        taskController.setIsGraded(isGraded);\n                        sendSuccess();\n                        window.focus();\n                        displayProblemSelectedMessage();\n                    } catch (error) {\n                        sendFailure(error.message);\n                    }\n                  }, false);\n            }\n\n            /**\n             * Display a success message in Moodle that a problem was successfully selected.\n             */\n            function displayProblemSelectedMessage() {\n                require(['core/str', \"core/notification\"], function(str, notification) {\n                    str.get_strings([{\n                        'key': 'mumie_form_updated_selection',\n                        component: 'mod_mumie'\n                    }]).done(function(s) {\n                        notification.addNotification({\n                            message: s[0],\n                            type: \"info\"\n                        });\n                    }).fail(notification.exception);\n                });\n            }\n\n            return {\n                init: function() {\n                    const gradingType = taskController.getGradingType();\n                    problemSelectorButton.onclick = function() {\n                        problemSelectorWindow = window.open(\n                            lmsSelectorUrl\n                                + '/lms-problem-selector?'\n                                + 'org='\n                                + mumieOrg\n                                + '&serverUrl='\n                                + encodeURIComponent(serverController.getSelectedServer().urlprefix)\n                                + '&problemLang='\n                                + langController.getSelectedLanguage()\n                                + '&origin=' + encodeURIComponent(window.location.origin)\n                                + '&uiLang=' + systemLanguage\n                                + '&gradingType=' + gradingType\n                                + '&multiCourse=true'\n                            , '_blank'\n                        );\n                    };\n\n                    window.onclose = function() {\n                        sendSuccess();\n                    };\n\n                    window.addEventListener(\"beforeunload\", function() {\n                        sendSuccess();\n                     }, false);\n\n                    addMessageListener();\n\n                    multiProblemSelectorButton.onclick = function(e) {\n                        e.preventDefault();\n                        problemSelectorWindow = window.open(\n                          lmsSelectorUrl\n                          + '/lms-problem-selector?'\n                          + \"serverUrl=\"\n                          + encodeURIComponent(serverController.getSelectedServer().urlprefix),\n                          \"_blank\",\n                          'toolbar=0,location=0,menubar=0'\n                        );\n                    };\n                },\n                disable: function() {\n                    problemSelectorButton.disabled = true;\n                }\n            };\n        })();\n\n        const courseController = (function() {\n            const courseNameElem = document.getElementById(\"id_mumie_course\");\n            const coursefileElem = document.getElementsByName(\"mumie_coursefile\")[0];\n\n\n            /**\n             * Update the hidden input field with the selected course's course file path\n             *\n             * @param {string} coursefile\n             */\n            function updateCoursefilePath(coursefile) {\n                coursefileElem.value = coursefile;\n                updateCourseName();\n            }\n\n            /**\n             * Update displayed course name.\n             */\n            function updateCourseName() {\n                const selectedCourse = courseController.getSelectedCourse();\n                const selectedLanguage = langController.getSelectedLanguage();\n                if (!selectedCourse || !selectedLanguage) {\n                    return;\n                }\n                courseNameElem.value = selectedCourse.name\n                    .find(translation => translation.language === selectedLanguage)?.value;\n            }\n\n            return {\n                init: function() {\n                    updateCourseName();\n                },\n                getSelectedCourse: function() {\n                    const courses = serverController.getSelectedServer().courses;\n                    return courses.find(course => course.coursefile === coursefileElem.value);\n                },\n                updateCourseName: function() {\n                    updateCourseName();\n                },\n                setCourse: function(courseFile) {\n                    updateCoursefilePath(courseFile);\n                }\n            };\n        })();\n\n        const langController = (function() {\n            const languageElem = document.getElementById(\"id_language\");\n\n            /**\n             * Check if the given language exists in the currently selected course.\n             * @param {string} lang\n             * @returns {boolean} Whether the language exists\n             */\n            function languageExists(lang) {\n                return courseController.getSelectedCourse().languages.includes(lang);\n            }\n            return {\n                getSelectedLanguage: function() {\n                    return languageElem.value;\n                },\n                setLanguage: function(lang) {\n                    if (!languageExists(lang)) {\n                        throw new Error(\"Selected language not available\");\n                    }\n                    languageElem.value = lang;\n                    courseController.updateCourseName();\n                }\n            };\n        })();\n\n        const taskController = (function() {\n            const taskSelectionInput = document.getElementsByName(\"taskurl\")[0];\n            const nameElem = document.getElementById(\"id_name\");\n            const taskDisplayElement = document.getElementById(\"id_task_display_element\");\n            const isGradedElem = document.getElementById('id_mumie_isgraded');\n\n\n            /**\n             * Update the activity's name in the input field\n             */\n            function updateName() {\n                const newHeadline = getHeadline(taskController.getSelectedTask());\n                if (!isCustomName()) {\n                    nameElem.value = newHeadline;\n                }\n                taskDisplayElement.value = newHeadline;\n            }\n\n            /**\n             * Check whether the activity has a custom name\n             *\n             * @return {boolean} True, if there is no headline with that name in all tasks\n             */\n            function isCustomName() {\n                if (nameElem.value.length === 0) {\n                    return false;\n                }\n                return !getAllHeadlines().includes(nameElem.value);\n            }\n\n            /**\n             * Get the task's headline for the currently selected language\n             * @param {Object} task\n             * @returns  {string|null} the headline\n             */\n            function getHeadline(task) {\n                if (!task) {\n                    return null;\n                }\n                const selectedLanguage = langController.getSelectedLanguage();\n                const headlineWrapper = task.headline.find(localHeadline => localHeadline.language === selectedLanguage);\n                return headlineWrapper ? headlineWrapper.name : null;\n            }\n\n            /**\n             * Get all tasks that are available on all servers\n             *\n             * @return {Object} Array containing all available tasks\n             */\n            function getAllTasks() {\n                return serverController.getAllServers()\n                    .flatMap(server => server.courses)\n                    .flatMap(course => course.tasks);\n            }\n\n            /**\n             * Get all possible headlines in all languages\n             * @returns {Object} Array containing all headlines\n             */\n            function getAllHeadlines() {\n                return getAllTasks().flatMap(task => task.headline)\n                    .map(headline => headline.name)\n                    .concat(courseController.getSelectedCourse().name.map(n => n.value));\n            }\n\n            /**\n             * Add language parameter to the task's link to display content in the selected language\n             * @param {Object} task\n             * @returns {string}\n             */\n            function getLocalizedLinkFromTask(task) {\n                return getLocalizedLink(task.link);\n            }\n\n            /**\n             * Add language parameter to link\n             * @param {string} link\n             * @returns {string}\n             */\n            function getLocalizedLink(link) {\n                return link + \"?lang=\" + langController.getSelectedLanguage();\n            }\n\n            /**\n             * Form inputs related to grades should be disabled, if the MUMIE Task is not graded.\n             */\n            function updateGradeEditability() {\n                const disabled = isGradedElem.value === '0';\n                document.getElementById('id_points').disabled = disabled;\n                document.getElementById('id_gradepass').disabled = disabled;\n                document.getElementById('id_duedate_enabled').disabled = disabled;\n                document.getElementById('id_gradecat').disabled = disabled;\n            }\n\n            /**\n             * Get a task that links to a course's overview page\n             * @param {Object} course\n             * @returns {Object} task\n             */\n            function getPseudoTaskFromCourse(course) {\n                var headline = [];\n                for (var i in course.name) {\n                    var name = course.name[i];\n                    headline.push({\n                        \"name\": name.value,\n                        \"language\": name.language\n                    });\n                }\n                return {\n                    \"link\": course.link,\n                    \"headline\": headline\n                };\n            }\n\n            return {\n                init: function() {\n                    updateName();\n                },\n                getSelectedTask: function() {\n                    const selectedLink = taskSelectionInput.value;\n                    const selectedCourse = courseController.getSelectedCourse();\n                    if (!selectedCourse) {\n                        return null;\n                    }\n                    const tasks = selectedCourse\n                        .tasks\n                        .slice();\n                    tasks.push(getPseudoTaskFromCourse(selectedCourse));\n                    return tasks\n                        .find(task => getLocalizedLinkFromTask(task) === selectedLink);\n                },\n                setSelection: function(newSelection) {\n                    taskSelectionInput.value = newSelection;\n                    updateName();\n                },\n                setIsGraded: function(isGraded) {\n                    if (isGraded === null) {\n                        isGradedElem.value = null;\n                    }\n                    isGradedElem.value = isGraded ? '1' : '0';\n                    updateGradeEditability();\n                },\n                getGradingType: function() {\n                    const isGraded = isGradedElem.value;\n                    if (isGraded === '1') {\n                        return 'graded';\n                    } else if (isGraded === '0') {\n                        return 'ungraded';\n                    }\n                    return 'all';\n                }\n            };\n        })();\n\n\n        const multiTaskEditController = (function() {\n            const propertySelectionInputs = document.getElementsByName(\"mumie_multi_edit_property\");\n            const selectedTaskProperties = document.getElementsByName(\"mumie_selected_task_properties\")[0];\n            let selectedTaskProp = [];\n            const taskSelectionInputs = document.getElementsByName(\"mumie_multi_edit_task\");\n            const selectedTasks = document.getElementsByName(\"mumie_selected_tasks\")[0];\n            let selectedTaskIds = [];\n            const sectionInputs = document.getElementsByName(\"mumie_multi_edit_section\");\n\n            /**\n             * Push an element to an array, if it's not already included.\n             *\n             * @param {string[]} array\n             * @param {string} element\n             */\n            function pushIfNotExists(array, element) {\n                if (!array.includes(element)) {\n                    array.push(element);\n                }\n            }\n\n            /**\n             * Set selection listeners for other MUMIE Tasks in the course.\n             */\n            function setTaskSelectionListeners() {\n                taskSelectionInputs.forEach(function(checkbox) {\n                    checkbox.onchange = function() {\n                        if (!checkbox.checked) {\n                            selectedTaskIds = selectedTaskIds.filter(elem => elem !== checkbox.value);\n                        } else {\n                            selectedTaskIds.push(checkbox.value);\n                        }\n                        selectedTasks.value = JSON.stringify(selectedTaskIds);\n                    };\n                });\n            }\n\n            /**\n             * Set selection listeners for properties to apply to MUMIE Tasks in the course.\n             */\n            function setPropertySelectionListeners() {\n                propertySelectionInputs.forEach(function(checkbox) {\n                    checkbox.onchange = function() {\n                        if (!checkbox.checked) {\n                            selectedTaskProp = selectedTaskProp.filter(elem => elem !== checkbox.value);\n                        } else {\n                            selectedTaskProp.push(checkbox.value);\n                        }\n                        selectedTaskProperties.value = JSON.stringify(selectedTaskProp);\n                    };\n                });\n            }\n\n            /**\n             * Set selection listeners for entire section of MUMIE Tasks in the course\n             */\n            function setSectionSelectionListeners() {\n                sectionInputs.forEach(function(sectionCheckbox) {\n                    sectionCheckbox.onchange = function() {\n                        if (!sectionCheckbox.checked) {\n                            taskSelectionInputs.forEach(function(taskCheckbox) {\n                                if (taskCheckbox.getAttribute('section') === sectionCheckbox.value) {\n                                    taskCheckbox.checked = false;\n                                    selectedTaskIds = selectedTaskIds.filter(elem => taskCheckbox.value !== elem);\n                                }\n                            });\n                        } else {\n                            taskSelectionInputs.forEach(function(taskCheckbox) {\n                                if (taskCheckbox.getAttribute('section') === sectionCheckbox.value) {\n                                    taskCheckbox.checked = true;\n                                    pushIfNotExists(selectedTaskIds, taskCheckbox.value);\n                                }\n                            });\n                        }\n                        selectedTasks.value = JSON.stringify(selectedTaskIds);\n                    };\n                });\n            }\n\n            return {\n                init: function() {\n                    setTaskSelectionListeners();\n                    setPropertySelectionListeners();\n                    setSectionSelectionListeners();\n                },\n            };\n        })();\n\n        /**\n         *  Disable all dropdown menus and show notification\n         * @param {string} errorKey\n         */\n        function disableDropDownMenus(errorKey) {\n            require(['core/str', \"core/notification\"], function(str, notification) {\n                str.get_strings([{\n                    'key':  errorKey,\n                    component: 'mod_mumie'\n                }]).done(function(s) {\n                    notification.addNotification({\n                        message: s[0] + \"<b>\" + missingConfig.getAttribute(\"value\") + \"</b>\",\n                        type: \"problem\"\n                    });\n                }).fail(notification.exception);\n            });\n            serverController.disable();\n            problemSelectorController.disable();\n        }\n\n        return {\n            init: function(contextid, prbSelectorUrl, lang) {\n                lmsSelectorUrl = prbSelectorUrl;\n                systemLanguage = lang;\n                const isEdit = document.getElementById(\"id_name\").getAttribute('value');\n                const serverStructure = JSON.parse(document.getElementsByName('mumie_server_structure')[0].value);\n                if (isEdit && !serverConfigExists()) {\n                    disableDropDownMenus('mumie_form_missing_server');\n                } else if (!serverStructure.length) {\n                    disableDropDownMenus('mumie_form_no_server_conf');\n                } else {\n                    serverController.init(serverStructure);\n                    courseController.init();\n                    taskController.init(isEdit);\n                    multiTaskEditController.init();\n                    problemSelectorController.init();\n                }\n                multiTaskEditController.init();\n                if (addServerButton) {\n                    require(['auth_mumie/mumie_server_config'], function(MumieServer) {\n                        MumieServer.init(addServerButton, contextid);\n                    });\n                }\n            }\n        };\n\n        /**\n         * Remove all child elements of a given html element\n         * @param {Object} elem\n         */\n        function removeChildElems(elem) {\n            while (elem.firstChild) {\n                elem.removeChild(elem.firstChild);\n            }\n        }\n\n        /**\n         * Check, if the flag for an existing config is set\n         * @returns {boolean}\n         */\n        function serverConfigExists() {\n            return document.getElementsByName(\"mumie_missing_config\")[0].getAttribute(\"value\") === \"\";\n        }\n    });\n"],"names":["define","addServerButton","document","getElementById","missingConfig","getElementsByName","lmsSelectorUrl","systemLanguage","serverController","serverStructure","serverDropDown","init","structure","getSelectedServer","selectedServerName","options","selectedIndex","text","find","server","name","disable","disabled","elem","firstChild","removeChild","removeChildElems","getAllServers","problemSelectorController","problemSelectorButton","multiProblemSelectorButton","problemSelectorWindow","mumieOrg","value","sendResponse","response","postMessage","JSON","stringify","sendSuccess","message","success","addMessageListener","window","addEventListener","event","origin","importObj","parse","data","isGraded","courseController","setCourse","path_to_coursefile","langController","setLanguage","language","taskController","setSelection","link","setIsGraded","focus","require","str","notification","get_strings","component","done","s","addNotification","type","fail","exception","error","sendFailure","gradingType","getGradingType","onclick","open","encodeURIComponent","urlprefix","getSelectedLanguage","location","onclose","e","preventDefault","courseNameElem","coursefileElem","updateCourseName","selectedCourse","getSelectedCourse","selectedLanguage","translation","_selectedCourse$name$","courses","course","coursefile","courseFile","languageElem","lang","languages","includes","languageExists","Error","taskSelectionInput","nameElem","taskDisplayElement","isGradedElem","updateName","newHeadline","task","headlineWrapper","headline","localHeadline","getHeadline","getSelectedTask","length","flatMap","tasks","map","concat","n","isCustomName","getLocalizedLinkFromTask","selectedLink","slice","push","i","getPseudoTaskFromCourse","newSelection","updateGradeEditability","multiTaskEditController","propertySelectionInputs","selectedTaskProperties","selectedTaskProp","taskSelectionInputs","selectedTasks","selectedTaskIds","sectionInputs","forEach","checkbox","onchange","checked","filter","sectionCheckbox","taskCheckbox","array","element","getAttribute","disableDropDownMenus","errorKey","contextid","prbSelectorUrl","isEdit","MumieServer"],"mappings":"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"}