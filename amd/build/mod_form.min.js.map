{"version":3,"file":"mod_form.min.js","sources":["../src/mod_form.js"],"sourcesContent":["define(['jquery', 'core/templates', 'core/modal_factory', 'auth_mumie/mumie_server_config', 'core/ajax'],\n    function() {\n        const addServerButton = document.getElementById(\"id_add_server_button\");\n        const missingConfig = document.getElementsByName(\"mumie_missing_config\")[0];\n        let lmsSelectorUrl;\n        let systemLanguage;\n        let contextId;\n        const serverController = (function() {\n            let serverStructure;\n            const serverDropDown = document.getElementById(\"id_server\");\n\n            return {\n                init: function(structure) {\n                    serverStructure = structure;\n                },\n                getSelectedServer: function() {\n                    const selectedServerName = serverDropDown.options[serverDropDown.selectedIndex].text;\n                    return serverStructure.find(server => server.name === selectedServerName);\n                },\n                disable: function() {\n                    serverDropDown.disabled = true;\n                    removeChildElems(serverDropDown);\n                }\n            };\n        })();\n\n        const problemSelectorController = (function() {\n            const problemSelectorButton = document.getElementById('id_prb_selector_btn');\n            const multiProblemSelectorButton = document.getElementById('id_multi_problem_selector_btn');\n            let problemSelectorWindow;\n            const mumieOrg = document.getElementsByName('mumie_org')[0].value;\n\n            /**\n             * Send a message to the problem selector window.\n             *\n             * Don't do anything if there is no problem selector window.\n             * @param {Object} response\n             */\n            function sendResponse(response) {\n                if (!problemSelectorWindow) {\n                    return;\n                }\n                problemSelectorWindow.postMessage(JSON.stringify(response), lmsSelectorUrl);\n            }\n\n            /**\n             * Send a success message to problem selector window\n             * @param {string} message\n             */\n            function sendSuccess(message = '') {\n                sendResponse({\n                    success: true,\n                    message: message\n                });\n            }\n\n            /**\n             * Send a failure message to problem selector window\n             * @param {string} message\n             */\n            function sendFailure(message = '') {\n                sendResponse({\n                    success: false,\n                    message: message\n                });\n            }\n\n            /**\n             * Add an event listener that accepts messages from LMS-Browser and updates the selected problem.\n             */\n            function addMessageListener() {\n                window.addEventListener('message', (event) => {\n                    if (event.origin !== lmsSelectorUrl) {\n                        return;\n                    }\n                    const importObj = JSON.parse(event.data);\n                    const isGraded = importObj.isGraded !== false;\n                    const worksheet = importObj.worksheet ?? null;\n                    try {\n                        courseController.setCourse(importObj.path_to_coursefile);\n                        langController.setLanguage(importObj.language);\n                        taskController.setSelection(importObj.link, importObj.language, importObj.name);\n                        taskController.setIsGraded(isGraded);\n                        worksheetController.setWorksheet(worksheet);\n                        sendSuccess();\n                        window.focus();\n                        displayProblemSelectedMessage();\n                    } catch (error) {\n                        sendFailure(error.message);\n                    }\n                  }, false);\n            }\n\n            /**\n             * Display a success message in Moodle that a problem was successfully selected.\n             */\n            function displayProblemSelectedMessage() {\n                require(['core/str', \"core/notification\"], function(str, notification) {\n                    str.get_strings([{\n                        'key': 'mumie_form_updated_selection',\n                        component: 'mod_mumie'\n                    }]).done(function(s) {\n                        notification.addNotification({\n                            message: s[0],\n                            type: \"info\"\n                        });\n                    }).fail(notification.exception);\n                });\n            }\n\n            /**\n             * Builds the URL to the Problem Selector\n             * @returns {string} URL to the Problem Selector\n             */\n            function buildURL() {\n                const gradingType = taskController.getGradingType();\n                const selection = taskController.getDelocalizedTaskLink();\n                const selectedServer = serverController.getSelectedServer().urlprefix;\n                const useSSO = shouldUseSSO(lmsSelectorUrl, selectedServer);\n                if (useSSO) {\n                    return '/auth/mumie/problem_selector.php?'\n                        + 'org='\n                        + mumieOrg\n                        + '&server_url='\n                        + encodeURIComponent(selectedServer)\n                        + '&problem_lang='\n                        + langController.getSelectedLanguage()\n                        + '&origin=' + encodeURIComponent(window.location.origin)\n                        + '&grading_type=' + gradingType\n                        + '&context_id=' + contextId\n                        + (selection ? '&selection=' + selection : '');\n                }\n                return lmsSelectorUrl\n                    + '/lms-problem-selector?'\n                    + 'org='\n                    + mumieOrg\n                    + '&serverUrl='\n                    + encodeURIComponent(selectedServer)\n                    + '&problemLang='\n                    + langController.getSelectedLanguage()\n                    + '&origin=' + encodeURIComponent(window.location.origin)\n                    + '&uiLang=' + systemLanguage\n                    + '&gradingType=' + gradingType\n                    + '&multiCourse=true'\n                    + '&worksheet=true'\n                    + (selection ? '&selection=' + selection : '');\n            }\n\n            /**\n             * Determines whether the Single Sign-On (SSO) should be used when opening the Problem Selector.\n             * SSO is only supposed to be used when the Problem Selector URL has the same origin as the\n             * URL of the selected MUMIE server.\n             *\n             * @param {string} problemSelectorUrl - The URL of the problem selector.\n             * @param {string} selectedServerUrl - The URL of the selected MUMIE server\n             * @returns {boolean} Whether SSO should be used for the Problem Selector or not\n             */\n            function shouldUseSSO(problemSelectorUrl, selectedServerUrl) {\n                return new URL(problemSelectorUrl).origin === new URL(selectedServerUrl).origin;\n            }\n\n            return {\n                init: function() {\n                    problemSelectorButton.onclick = function() {\n                        // eslint-disable-next-line no-console\n                        console.log(\"PROBLEM SELECTOR URL: \", buildURL());\n                        problemSelectorWindow = window.open(buildURL(), '_blank');\n                    };\n\n                    window.onclose = function() {\n                        sendSuccess();\n                    };\n\n                    window.addEventListener(\"beforeunload\", function() {\n                        sendSuccess();\n                     }, false);\n\n                    addMessageListener();\n\n                    multiProblemSelectorButton.onclick = function(e) {\n                        e.preventDefault();\n                        problemSelectorWindow = window.open(\n                          lmsSelectorUrl\n                          + '/lms-problem-selector?'\n                          + \"serverUrl=\"\n                          + encodeURIComponent(serverController.getSelectedServer().urlprefix)\n                          + '&gradingType=all',\n                          \"_blank\",\n                          'toolbar=0,location=0,menubar=0'\n                        );\n                    };\n                },\n                disable: function() {\n                    problemSelectorButton.disabled = true;\n                }\n            };\n        })();\n\n        const courseController = (function() {\n            const courseNameElem = document.getElementById(\"id_mumie_course\");\n            const coursefileElem = document.getElementsByName(\"mumie_coursefile\")[0];\n\n\n            /**\n             * Update the hidden input field with the selected course's course file path\n             *\n             * @param {string} coursefile\n             */\n            function updateCoursefilePath(coursefile) {\n                coursefileElem.value = coursefile;\n                updateCourseName();\n            }\n\n            /**\n             * Update displayed course name.\n             */\n            function updateCourseName() {\n                const selectedCourse = courseController.getSelectedCourse();\n                const selectedLanguage = langController.getSelectedLanguage();\n                if (!selectedCourse || !selectedLanguage) {\n                    return;\n                }\n                courseNameElem.value = selectedCourse.name\n                    .find(translation => translation.language === selectedLanguage)?.value;\n            }\n\n            return {\n                init: function() {\n                    updateCourseName();\n                },\n                getSelectedCourse: function() {\n                    const courses = serverController.getSelectedServer().courses;\n                    return courses.find(course => course.coursefile === coursefileElem.value);\n                },\n                setCourse: function(courseFile) {\n                    updateCoursefilePath(courseFile);\n                }\n            };\n        })();\n\n        const langController = (function() {\n            const languageElem = document.getElementById(\"id_language\");\n            return {\n                getSelectedLanguage: function() {\n                    return languageElem.value;\n                },\n                setLanguage: function(lang) {\n                    languageElem.value = lang;\n                }\n            };\n        })();\n\n        const taskController = (function() {\n            const taskSelectionInput = document.getElementsByName(\"taskurl\")[0];\n            const nameElem = document.getElementById(\"id_name\");\n            const taskDisplayElement = document.getElementById(\"id_task_display_element\");\n            const isGradedElem = document.getElementById('id_mumie_isgraded');\n            const LANG_REQUEST_PARAM_PREFIX = \"?lang=\";\n\n            /**\n             * Update the activity's name in the input field\n             * @param {string} name\n             */\n            function updateName(name) {\n                nameElem.value = name;\n            }\n\n            /**\n             * @param {string} localizedLink\n             */\n            function updateTaskDisplayElemement(localizedLink) {\n                taskDisplayElement.value = localizedLink;\n            }\n\n            /**\n             * Update task uri\n             * @param {string} link\n             * @param {string} language\n             */\n            function updateTaskUri(link, language) {\n                const localizedLink = localizeLink(link, language);\n                taskSelectionInput.value = localizedLink;\n                updateTaskDisplayElemement(localizedLink);\n            }\n\n            /**\n             * Add lang request param to link\n             * @param {string} link\n             * @param {string} language\n             * @returns {string} Link with lang request param\n             */\n            function localizeLink(link, language) {\n                return link + LANG_REQUEST_PARAM_PREFIX + language;\n            }\n\n            /**\n             * Remove lang request param from link\n             * @param {string} link Link that may have lang request param\n             * @returns {string} Link without lang request param\n             */\n            function delocalizeLink(link) {\n                if (link.includes(LANG_REQUEST_PARAM_PREFIX)) {\n                    return link.split(LANG_REQUEST_PARAM_PREFIX)[0];\n                }\n                return link;\n            }\n\n            /**\n             * Form inputs related to grades should be disabled, if the MUMIE Task is not graded.\n             */\n            function updateGradeEditability() {\n                const disabled = isGradedElem.value === '0';\n                document.getElementById('id_points').disabled = disabled;\n                document.getElementById('id_gradepass').disabled = disabled;\n                document.getElementById('id_duedate_enabled').disabled = disabled;\n                document.getElementById('id_gradecat').disabled = disabled;\n            }\n\n            return {\n                init: function() {\n                    updateTaskDisplayElemement(taskSelectionInput.value);\n                },\n                setSelection: function(link, language, name) {\n                    updateTaskUri(link, language);\n                    updateName(name);\n                },\n                setIsGraded: function(isGraded) {\n                    if (isGraded === null) {\n                        isGradedElem.value = null;\n                    }\n                    isGradedElem.value = isGraded ? '1' : '0';\n                    updateGradeEditability();\n                },\n                getGradingType: function() {\n                    const isGraded = isGradedElem.value;\n                    if (isGraded === '1') {\n                        return 'graded';\n                    } else if (isGraded === '0') {\n                        return 'ungraded';\n                    }\n                    return 'all';\n                },\n                getDelocalizedTaskLink: function() {\n                    return delocalizeLink(taskSelectionInput.value);\n                }\n            };\n        })();\n\n\n        const multiTaskEditController = (function() {\n            const propertySelectionInputs = document.getElementsByName(\"mumie_multi_edit_property\");\n            const selectedTaskProperties = document.getElementsByName(\"mumie_selected_task_properties\")[0];\n            let selectedTaskProp = [];\n            const taskSelectionInputs = document.getElementsByName(\"mumie_multi_edit_task\");\n            const selectedTasks = document.getElementsByName(\"mumie_selected_tasks\")[0];\n            let selectedTaskIds = [];\n            const sectionInputs = document.getElementsByName(\"mumie_multi_edit_section\");\n\n            /**\n             * Push an element to an array, if it's not already included.\n             *\n             * @param {string[]} array\n             * @param {string} element\n             */\n            function pushIfNotExists(array, element) {\n                if (!array.includes(element)) {\n                    array.push(element);\n                }\n            }\n\n            /**\n             * Set selection listeners for other MUMIE Tasks in the course.\n             */\n            function setTaskSelectionListeners() {\n                taskSelectionInputs.forEach(function(checkbox) {\n                    checkbox.onchange = function() {\n                        if (!checkbox.checked) {\n                            selectedTaskIds = selectedTaskIds.filter(elem => elem !== checkbox.value);\n                        } else {\n                            selectedTaskIds.push(checkbox.value);\n                        }\n                        selectedTasks.value = JSON.stringify(selectedTaskIds);\n                    };\n                });\n            }\n\n            /**\n             * Set selection listeners for properties to apply to MUMIE Tasks in the course.\n             */\n            function setPropertySelectionListeners() {\n                propertySelectionInputs.forEach(function(checkbox) {\n                    checkbox.onchange = function() {\n                        if (!checkbox.checked) {\n                            selectedTaskProp = selectedTaskProp.filter(elem => elem !== checkbox.value);\n                        } else {\n                            selectedTaskProp.push(checkbox.value);\n                        }\n                        selectedTaskProperties.value = JSON.stringify(selectedTaskProp);\n                    };\n                });\n            }\n\n            /**\n             * Set selection listeners for entire section of MUMIE Tasks in the course\n             */\n            function setSectionSelectionListeners() {\n                sectionInputs.forEach(function(sectionCheckbox) {\n                    sectionCheckbox.onchange = function() {\n                        if (!sectionCheckbox.checked) {\n                            taskSelectionInputs.forEach(function(taskCheckbox) {\n                                if (taskCheckbox.getAttribute('section') === sectionCheckbox.value) {\n                                    taskCheckbox.checked = false;\n                                    selectedTaskIds = selectedTaskIds.filter(elem => taskCheckbox.value !== elem);\n                                }\n                            });\n                        } else {\n                            taskSelectionInputs.forEach(function(taskCheckbox) {\n                                if (taskCheckbox.getAttribute('section') === sectionCheckbox.value) {\n                                    taskCheckbox.checked = true;\n                                    pushIfNotExists(selectedTaskIds, taskCheckbox.value);\n                                }\n                            });\n                        }\n                        selectedTasks.value = JSON.stringify(selectedTaskIds);\n                    };\n                });\n            }\n\n            return {\n                init: function() {\n                    setTaskSelectionListeners();\n                    setPropertySelectionListeners();\n                    setSectionSelectionListeners();\n                },\n            };\n        })();\n\n        const worksheetController = (function() {\n            const worksheetElement = document.getElementById(\"id_mumie_worksheet\");\n            return {\n                setWorksheet: function(worksheet) {\n                    if (worksheet) {\n                        worksheetElement.setAttribute(\"value\", JSON.stringify(worksheet));\n                    } else {\n                        worksheetElement.removeAttribute(\"value\");\n                    }\n                }\n            };\n        })();\n\n        /**\n         *  Disable all dropdown menus and show notification\n         * @param {string} errorKey\n         */\n        function disableDropDownMenus(errorKey) {\n            require(['core/str', \"core/notification\"], function(str, notification) {\n                str.get_strings([{\n                    'key':  errorKey,\n                    component: 'mod_mumie'\n                }]).done(function(s) {\n                    notification.addNotification({\n                        message: s[0] + \"<b>\" + missingConfig.getAttribute(\"value\") + \"</b>\",\n                        type: \"problem\"\n                    });\n                }).fail(notification.exception);\n            });\n            serverController.disable();\n            problemSelectorController.disable();\n        }\n\n        return {\n            init: function(contextIdParam, prbSelectorUrl, lang) {\n                lmsSelectorUrl = prbSelectorUrl;\n                systemLanguage = lang;\n                contextId = contextIdParam;\n                const isEdit = document.getElementById(\"id_name\").getAttribute('value');\n                const serverStructure = JSON.parse(document.getElementsByName('mumie_server_structure')[0].value);\n                if (isEdit && !serverConfigExists()) {\n                    disableDropDownMenus('mumie_form_missing_server');\n                } else if (!serverStructure.length) {\n                    disableDropDownMenus('mumie_form_no_server_conf');\n                } else {\n                    serverController.init(serverStructure);\n                    courseController.init();\n                    taskController.init();\n                    multiTaskEditController.init();\n                    problemSelectorController.init();\n                }\n                multiTaskEditController.init();\n                if (addServerButton) {\n                    require(['auth_mumie/mumie_server_config'], function(MumieServer) {\n                        MumieServer.init(addServerButton, contextId);\n                    });\n                }\n            }\n        };\n\n        /**\n         * Remove all child elements of a given html element\n         * @param {Object} elem\n         */\n        function removeChildElems(elem) {\n            while (elem.firstChild) {\n                elem.removeChild(elem.firstChild);\n            }\n        }\n\n        /**\n         * Check, if the flag for an existing config is set\n         * @returns {boolean}\n         */\n        function serverConfigExists() {\n            return document.getElementsByName(\"mumie_missing_config\")[0].getAttribute(\"value\") === \"\";\n        }\n    });\n"],"names":["define","addServerButton","document","getElementById","missingConfig","getElementsByName","lmsSelectorUrl","systemLanguage","contextId","serverController","serverStructure","serverDropDown","init","structure","getSelectedServer","selectedServerName","options","selectedIndex","text","find","server","name","disable","disabled","elem","firstChild","removeChild","removeChildElems","problemSelectorController","problemSelectorButton","multiProblemSelectorButton","problemSelectorWindow","mumieOrg","value","sendResponse","response","postMessage","JSON","stringify","sendSuccess","message","success","addMessageListener","window","addEventListener","event","origin","importObj","parse","data","isGraded","worksheet","courseController","setCourse","path_to_coursefile","langController","setLanguage","language","taskController","setSelection","link","setIsGraded","worksheetController","setWorksheet","focus","require","str","notification","get_strings","component","done","s","addNotification","type","fail","exception","error","sendFailure","buildURL","gradingType","getGradingType","selection","getDelocalizedTaskLink","selectedServer","urlprefix","selectedServerUrl","URL","encodeURIComponent","getSelectedLanguage","location","onclick","console","log","open","onclose","e","preventDefault","courseNameElem","coursefileElem","updateCourseName","selectedCourse","getSelectedCourse","selectedLanguage","translation","_selectedCourse$name$","courses","course","coursefile","courseFile","languageElem","lang","taskSelectionInput","nameElem","taskDisplayElement","isGradedElem","updateTaskDisplayElemement","localizedLink","updateTaskUri","localizeLink","updateName","updateGradeEditability","includes","split","multiTaskEditController","propertySelectionInputs","selectedTaskProperties","selectedTaskProp","taskSelectionInputs","selectedTasks","selectedTaskIds","sectionInputs","forEach","checkbox","onchange","checked","push","filter","sectionCheckbox","taskCheckbox","array","element","getAttribute","worksheetElement","setAttribute","removeAttribute","disableDropDownMenus","errorKey","contextIdParam","prbSelectorUrl","isEdit","length","MumieServer"],"mappings":"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"}