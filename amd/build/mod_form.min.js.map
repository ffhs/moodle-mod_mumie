{"version":3,"file":"mod_form.min.js","sources":["../src/mod_form.js"],"sourcesContent":["define(['jquery', 'core/templates', 'core/modal_factory', 'auth_mumie/mumie_server_config', 'core/ajax'],\n    function() {\n        const addServerButton = document.getElementById(\"id_add_server_button\");\n        const missingConfig = document.getElementsByName(\"mumie_missing_config\")[0];\n        let lmsSelectorUrl;\n        let systemLanguage;\n        const serverController = (function() {\n            let serverStructure;\n            const serverDropDown = document.getElementById(\"id_server\");\n\n            return {\n                init: function(structure) {\n                    serverStructure = structure;\n                },\n                getSelectedServer: function() {\n                    const selectedServerName = serverDropDown.options[serverDropDown.selectedIndex].text;\n                    return serverStructure.find(server => server.name === selectedServerName);\n                },\n                disable: function() {\n                    serverDropDown.disabled = true;\n                    removeChildElems(serverDropDown);\n                },\n                getAllServers: function() {\n                    return serverStructure;\n                }\n            };\n        })();\n\n        const problemSelectorController = (function() {\n            const problemSelectorButton = document.getElementById('id_prb_selector_btn');\n            let problemSelectorWindow;\n            const mumieOrg = document.getElementsByName('mumie_org')[0].value;\n\n            /**\n             * Send a message to the problem selector window.\n             *\n             * Don't do anything, if there is no problem selector window.\n             * @param {Object} response\n             */\n            function sendResponse(response) {\n                if (!problemSelectorWindow) {\n                    return;\n                }\n                problemSelectorWindow.postMessage(JSON.stringify(response), lmsSelectorUrl);\n            }\n\n            /**\n             * Send a success message to problem selector window\n             * @param {string} message\n             */\n            function sendSuccess(message = '') {\n                sendResponse({\n                    success: true,\n                    message: message\n                });\n            }\n\n            /**\n             * Send a failure message to problem selector window\n             * @param {string} message\n             */\n            function sendFailure(message = '') {\n                sendResponse({\n                    success: false,\n                    message: message\n                });\n            }\n\n            /**\n             * Add an event listener that accepts messages from LMS-Browser and updates the selected problem.\n             */\n            function addMessageListener() {\n                window.addEventListener('message', (event) => {\n                    if (event.origin !== lmsSelectorUrl) {\n                        return;\n                    }\n                    const importObj = JSON.parse(event.data);\n                    const isGraded = importObj.isGraded !== false;\n                    const worksheetConfiguration = importObj.worksheetConfiguration ?? null;\n                    try {\n                        courseController.setCourse(importObj.path_to_coursefile);\n                        langController.setLanguage(importObj.language);\n                        taskController.setSelection(importObj.link + '?lang=' + importObj.language);\n                        taskController.setIsGraded(isGraded);\n                        worksheetController.setWorksheetConfiguration(worksheetConfiguration);\n                        sendSuccess();\n                        window.focus();\n                        displayProblemSelectedMessage();\n                    } catch (error) {\n                        sendFailure(error.message);\n                    }\n                  }, false);\n            }\n\n            /**\n             * Display a success message in Moodle that a problem was successfully selected.\n             */\n            function displayProblemSelectedMessage() {\n                require(['core/str', \"core/notification\"], function(str, notification) {\n                    str.get_strings([{\n                        'key': 'mumie_form_updated_selection',\n                        component: 'mod_mumie'\n                    }]).done(function(s) {\n                        notification.addNotification({\n                            message: s[0],\n                            type: \"info\"\n                        });\n                    }).fail(notification.exception);\n                });\n            }\n\n            return {\n                init: function() {\n                    const gradingType = taskController.getGradingType();\n                    problemSelectorButton.onclick = function() {\n                        problemSelectorWindow = window.open(\n                            lmsSelectorUrl\n                                + '/lms-problem-selector?'\n                                + 'org='\n                                + mumieOrg\n                                + '&serverUrl='\n                                + encodeURIComponent(serverController.getSelectedServer().urlprefix)\n                                + '&problemLang='\n                                + langController.getSelectedLanguage()\n                                + '&origin=' + encodeURIComponent(window.location.origin)\n                                + '&uiLang=' + systemLanguage\n                                + '&gradingType=' + gradingType\n                                + '&multiCourse=true'\n                                + '&worksheet=true'\n                            , '_blank'\n                        );\n                    };\n\n                    window.onclose = function() {\n                        sendSuccess();\n                    };\n\n                    window.addEventListener(\"beforeunload\", function() {\n                        sendSuccess();\n                     }, false);\n\n                    addMessageListener();\n                },\n                disable: function() {\n                    problemSelectorButton.disabled = true;\n                }\n            };\n        })();\n\n        const courseController = (function() {\n            const courseNameElem = document.getElementById(\"id_mumie_course\");\n            const coursefileElem = document.getElementsByName(\"mumie_coursefile\")[0];\n\n\n            /**\n             * Update the hidden input field with the selected course's course file path\n             *\n             * @param {string} coursefile\n             */\n            function updateCoursefilePath(coursefile) {\n                coursefileElem.value = coursefile;\n                updateCourseName();\n            }\n\n            /**\n             * Update displayed course name.\n             */\n            function updateCourseName() {\n                const selectedCourse = courseController.getSelectedCourse();\n                const selectedLanguage = langController.getSelectedLanguage();\n                if (!selectedCourse || !selectedLanguage) {\n                    return;\n                }\n                courseNameElem.value = selectedCourse.name\n                    .find(translation => translation.language === selectedLanguage)?.value;\n            }\n\n            return {\n                init: function() {\n                    updateCourseName();\n                },\n                getSelectedCourse: function() {\n                    const courses = serverController.getSelectedServer().courses;\n                    return courses.find(course => course.coursefile === coursefileElem.value);\n                },\n                updateCourseName: function() {\n                    updateCourseName();\n                },\n                setCourse: function(courseFile) {\n                    updateCoursefilePath(courseFile);\n                }\n            };\n        })();\n\n        const langController = (function() {\n            const languageElem = document.getElementById(\"id_language\");\n\n            /**\n             * Check if the given language exists in the currently selected course.\n             * @param {string} lang\n             * @returns {boolean} Whether the language exists\n             */\n            function languageExists(lang) {\n                return courseController.getSelectedCourse().languages.includes(lang);\n            }\n            return {\n                getSelectedLanguage: function() {\n                    return languageElem.value;\n                },\n                setLanguage: function(lang) {\n                    if (!languageExists(lang)) {\n                        throw new Error(\"Selected language not available\");\n                    }\n                    languageElem.value = lang;\n                    courseController.updateCourseName();\n                }\n            };\n        })();\n\n        const taskController = (function() {\n            const taskSelectionInput = document.getElementsByName(\"taskurl\")[0];\n            const nameElem = document.getElementById(\"id_name\");\n            const taskDisplayElement = document.getElementById(\"id_task_display_element\");\n            const isGradedElem = document.getElementById('id_mumie_isgraded');\n\n\n            /**\n             * Update the activity's name in the input field\n             */\n            function updateName() {\n                const newHeadline = getHeadline(taskController.getSelectedTask());\n                if (!isCustomName()) {\n                    nameElem.value = newHeadline;\n                }\n                taskDisplayElement.value = newHeadline;\n            }\n\n            /**\n             * Check whether the activity has a custom name\n             *\n             * @return {boolean} True, if there is no headline with that name in all tasks\n             */\n            function isCustomName() {\n                if (nameElem.value.length === 0) {\n                    return false;\n                }\n                return !getAllHeadlines().includes(nameElem.value);\n            }\n\n            /**\n             * Get the task's headline for the currently selected language\n             * @param {Object} task\n             * @returns  {string|null} the headline\n             */\n            function getHeadline(task) {\n                if (!task) {\n                    return null;\n                }\n                const selectedLanguage = langController.getSelectedLanguage();\n                const headlineWrapper = task.headline.find(localHeadline => localHeadline.language === selectedLanguage);\n                return headlineWrapper ? headlineWrapper.name : null;\n            }\n\n            /**\n             * Get all tasks that are available on all servers\n             *\n             * @return {Object} Array containing all available tasks\n             */\n            function getAllTasks() {\n                return serverController.getAllServers()\n                    .flatMap(server => server.courses)\n                    .flatMap(course => course.tasks);\n            }\n\n            /**\n             * Get all possible headlines in all languages\n             * @returns {Object} Array containing all headlines\n             */\n            function getAllHeadlines() {\n                return getAllTasks().flatMap(task => task.headline)\n                    .map(headline => headline.name)\n                    .concat(courseController.getSelectedCourse().name.map(n => n.value));\n            }\n\n            /**\n             * Add language parameter to the task's link to display content in the selected language\n             * @param {Object} task\n             * @returns {string}\n             */\n            function getLocalizedLinkFromTask(task) {\n                return getLocalizedLink(task.link);\n            }\n\n            /**\n             * Add language parameter to link\n             * @param {string} link\n             * @returns {string}\n             */\n            function getLocalizedLink(link) {\n                return link + \"?lang=\" + langController.getSelectedLanguage();\n            }\n\n            /**\n             * Form inputs related to grades should be disabled, if the MUMIE Task is not graded.\n             */\n            function updateGradeEditability() {\n                const disabled = isGradedElem.value === '0';\n                document.getElementById('id_points').disabled = disabled;\n                document.getElementById('id_gradepass').disabled = disabled;\n                document.getElementById('id_duedate_enabled').disabled = disabled;\n                document.getElementById('id_gradecat').disabled = disabled;\n            }\n\n            /**\n             * Get a task that links to a course's overview page\n             * @param {Object} course\n             * @returns {Object} task\n             */\n            function getPseudoTaskFromCourse(course) {\n                var headline = [];\n                for (var i in course.name) {\n                    var name = course.name[i];\n                    headline.push({\n                        \"name\": name.value,\n                        \"language\": name.language\n                    });\n                }\n                return {\n                    \"link\": course.link,\n                    \"headline\": headline\n                };\n            }\n\n            return {\n                init: function() {\n                    updateName();\n                },\n                getSelectedTask: function() {\n                    const selectedLink = taskSelectionInput.value;\n                    const selectedCourse = courseController.getSelectedCourse();\n                    if (!selectedCourse) {\n                        return null;\n                    }\n                    const tasks = selectedCourse\n                        .tasks\n                        .slice();\n                    tasks.push(getPseudoTaskFromCourse(selectedCourse));\n                    return tasks\n                        .find(task => getLocalizedLinkFromTask(task) === selectedLink);\n                },\n                setSelection: function(newSelection) {\n                    taskSelectionInput.value = newSelection;\n                    updateName();\n                },\n                setIsGraded: function(isGraded) {\n                    if (isGraded === null) {\n                        isGradedElem.value = null;\n                    }\n                    isGradedElem.value = isGraded ? '1' : '0';\n                    updateGradeEditability();\n                },\n                getGradingType: function() {\n                    const isGraded = isGradedElem.value;\n                    if (isGraded === '1') {\n                        return 'graded';\n                    } else if (isGraded === '0') {\n                        return 'ungraded';\n                    }\n                    return 'all';\n                }\n            };\n        })();\n\n\n        const multiTaskEditController = (function() {\n            const propertySelectionInputs = document.getElementsByName(\"mumie_multi_edit_property\");\n            const selectedTaskProperties = document.getElementsByName(\"mumie_selected_task_properties\")[0];\n            let selectedTaskProp = [];\n            const taskSelectionInputs = document.getElementsByName(\"mumie_multi_edit_task\");\n            const selectedTasks = document.getElementsByName(\"mumie_selected_tasks\")[0];\n            let selectedTaskIds = [];\n            const sectionInputs = document.getElementsByName(\"mumie_multi_edit_section\");\n\n            /**\n             * Push an element to an array, if it's not already included.\n             *\n             * @param {string[]} array\n             * @param {string} element\n             */\n            function pushIfNotExists(array, element) {\n                if (!array.includes(element)) {\n                    array.push(element);\n                }\n            }\n\n            /**\n             * Set selection listeners for other MUMIE Tasks in the course.\n             */\n            function setTaskSelectionListeners() {\n                taskSelectionInputs.forEach(function(checkbox) {\n                    checkbox.onchange = function() {\n                        if (!checkbox.checked) {\n                            selectedTaskIds = selectedTaskIds.filter(elem => elem !== checkbox.value);\n                        } else {\n                            selectedTaskIds.push(checkbox.value);\n                        }\n                        selectedTasks.value = JSON.stringify(selectedTaskIds);\n                    };\n                });\n            }\n\n            /**\n             * Set selection listeners for properties to apply to MUMIE Tasks in the course.\n             */\n            function setPropertySelectionListeners() {\n                propertySelectionInputs.forEach(function(checkbox) {\n                    checkbox.onchange = function() {\n                        if (!checkbox.checked) {\n                            selectedTaskProp = selectedTaskProp.filter(elem => elem !== checkbox.value);\n                        } else {\n                            selectedTaskProp.push(checkbox.value);\n                        }\n                        selectedTaskProperties.value = JSON.stringify(selectedTaskProp);\n                    };\n                });\n            }\n\n            /**\n             * Set selection listeners for entire section of MUMIE Tasks in the course\n             */\n            function setSectionSelectionListeners() {\n                sectionInputs.forEach(function(sectionCheckbox) {\n                    sectionCheckbox.onchange = function() {\n                        if (!sectionCheckbox.checked) {\n                            taskSelectionInputs.forEach(function(taskCheckbox) {\n                                if (taskCheckbox.getAttribute('section') === sectionCheckbox.value) {\n                                    taskCheckbox.checked = false;\n                                    selectedTaskIds = selectedTaskIds.filter(elem => taskCheckbox.value !== elem);\n                                }\n                            });\n                        } else {\n                            taskSelectionInputs.forEach(function(taskCheckbox) {\n                                if (taskCheckbox.getAttribute('section') === sectionCheckbox.value) {\n                                    taskCheckbox.checked = true;\n                                    pushIfNotExists(selectedTaskIds, taskCheckbox.value);\n                                }\n                            });\n                        }\n                        selectedTasks.value = JSON.stringify(selectedTaskIds);\n                    };\n                });\n            }\n\n            return {\n                init: function() {\n                    setTaskSelectionListeners();\n                    setPropertySelectionListeners();\n                    setSectionSelectionListeners();\n                },\n            };\n        })();\n\n        const worksheetController = (function () {\n            const worksheetConfigurationElement = document.getElementById(\"id_mumie_worksheetconfiguration\");\n            return {\n                setWorksheetConfiguration: function (worksheetConfiguration) {\n                    if (worksheetConfiguration) {\n                        worksheetConfigurationElement.setAttribute(\"value\", JSON.stringify(worksheetConfiguration));\n                    }\n                    worksheetConfigurationElement.removeAttribute(\"value\");\n                }\n            };\n        })();\n\n        /**\n         *  Disable all dropdown menus and show notification\n         * @param {string} errorKey\n         */\n        function disableDropDownMenus(errorKey) {\n            require(['core/str', \"core/notification\"], function(str, notification) {\n                str.get_strings([{\n                    'key':  errorKey,\n                    component: 'mod_mumie'\n                }]).done(function(s) {\n                    notification.addNotification({\n                        message: s[0] + \"<b>\" + missingConfig.getAttribute(\"value\") + \"</b>\",\n                        type: \"problem\"\n                    });\n                }).fail(notification.exception);\n            });\n            serverController.disable();\n            problemSelectorController.disable();\n        }\n\n        return {\n            init: function(contextid, prbSelectorUrl, lang) {\n                lmsSelectorUrl = prbSelectorUrl;\n                systemLanguage = lang;\n                const isEdit = document.getElementById(\"id_name\").getAttribute('value');\n                const serverStructure = JSON.parse(document.getElementsByName('mumie_server_structure')[0].value);\n                if (isEdit && !serverConfigExists()) {\n                    disableDropDownMenus('mumie_form_missing_server');\n                } else if (!serverStructure.length) {\n                    disableDropDownMenus('mumie_form_no_server_conf');\n                } else {\n                    serverController.init(serverStructure);\n                    courseController.init();\n                    taskController.init(isEdit);\n                    multiTaskEditController.init();\n                    problemSelectorController.init();\n                }\n                multiTaskEditController.init();\n                if (addServerButton) {\n                    require(['auth_mumie/mumie_server_config'], function(MumieServer) {\n                        MumieServer.init(addServerButton, contextid);\n                    });\n                }\n            }\n        };\n\n        /**\n         * Remove all child elements of a given html element\n         * @param {Object} elem\n         */\n        function removeChildElems(elem) {\n            while (elem.firstChild) {\n                elem.removeChild(elem.firstChild);\n            }\n        }\n\n        /**\n         * Check, if the flag for an existing config is set\n         * @returns {boolean}\n         */\n        function serverConfigExists() {\n            return document.getElementsByName(\"mumie_missing_config\")[0].getAttribute(\"value\") === \"\";\n        }\n    });\n"],"names":["define","lmsSelectorUrl","systemLanguage","serverStructure","serverDropDown","languageElem","propertySelectionInputs","selectedTaskProperties","selectedTaskProp","taskSelectionInputs","selectedTasks","selectedTaskIds","sectionInputs","worksheetConfigurationElement","addServerButton","document","getElementById","missingConfig","getElementsByName","serverController","init","structure","getSelectedServer","selectedServerName","options","selectedIndex","text","find","server","name","disable","disabled","elem","firstChild","removeChild","removeChildElems","getAllServers","problemSelectorController","problemSelectorWindow","problemSelectorButton","mumieOrg","value","sendResponse","response","postMessage","JSON","stringify","sendSuccess","message","success","addMessageListener","window","addEventListener","event","origin","importObj","parse","data","isGraded","worksheetConfiguration","courseController","setCourse","path_to_coursefile","langController","setLanguage","language","taskController","setSelection","link","setIsGraded","worksheetController","setWorksheetConfiguration","focus","require","str","notification","get_strings","component","done","s","addNotification","type","fail","exception","error","sendFailure","gradingType","getGradingType","onclick","open","encodeURIComponent","urlprefix","getSelectedLanguage","location","onclose","courseNameElem","coursefileElem","updateCourseName","selectedCourse","getSelectedCourse","selectedLanguage","translation","_selectedCourse$name$","courses","course","coursefile","courseFile","lang","languages","includes","languageExists","Error","taskSelectionInput","nameElem","taskDisplayElement","isGradedElem","updateName","newHeadline","task","headlineWrapper","headline","localHeadline","getHeadline","getSelectedTask","length","flatMap","tasks","map","concat","n","isCustomName","getLocalizedLinkFromTask","selectedLink","slice","push","i","getPseudoTaskFromCourse","newSelection","multiTaskEditController","forEach","checkbox","onchange","checked","filter","sectionCheckbox","taskCheckbox","array","element","getAttribute","setAttribute","removeAttribute","disableDropDownMenus","errorKey","contextid","prbSelectorUrl","isEdit","MumieServer"],"mappings":"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"}