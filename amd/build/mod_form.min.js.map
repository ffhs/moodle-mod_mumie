{"version":3,"file":"mod_form.min.js","sources":["../src/mod_form.js"],"sourcesContent":["define(['jquery', 'core/templates', 'core/modal_factory', 'auth_mumie/mumie_server_config', 'core/ajax'],\n    function() {\n        const addServerButton = document.getElementById(\"id_add_server_button\");\n        const missingConfig = document.getElementsByName(\"mumie_missing_config\")[0];\n        let lmsSelectorUrl;\n        let systemLanguage;\n        const serverController = (function() {\n            let serverStructure;\n            const serverDropDown = document.getElementById(\"id_server\");\n\n            return {\n                init: function(structure) {\n                    serverStructure = structure;\n                },\n                getSelectedServer: function() {\n                    const selectedServerName = serverDropDown.options[serverDropDown.selectedIndex].text;\n                    return serverStructure.find(server => server.name === selectedServerName);\n                },\n                disable: function() {\n                    serverDropDown.disabled = true;\n                    removeChildElems(serverDropDown);\n                },\n                getAllServers: function() {\n                    return serverStructure;\n                }\n            };\n        })();\n\n        const problemSelectorController = (function() {\n            const problemSelectorButton = document.getElementById('id_prb_selector_btn');\n            let problemSelectorWindow;\n            const mumieOrg = document.getElementsByName('mumie_org')[0].value;\n\n            /**\n             * Send a message to the problem selector window.\n             *\n             * Don't do anything, if there is no problem selector window.\n             * @param {Object} response\n             */\n            function sendResponse(response) {\n                if (!problemSelectorWindow) {\n                    return;\n                }\n                problemSelectorWindow.postMessage(JSON.stringify(response), lmsSelectorUrl);\n            }\n\n            /**\n             * Send a success message to problem selector window\n             * @param {string} message\n             */\n            function sendSuccess(message = '') {\n                sendResponse({\n                    success: true,\n                    message: message\n                });\n            }\n\n            /**\n             * Send a failure message to problem selector window\n             * @param {string} message\n             */\n            function sendFailure(message = '') {\n                sendResponse({\n                    success: false,\n                    message: message\n                });\n            }\n\n            /**\n             * Add an event listener that accepts messages from LMS-Browser and updates the selected problem.\n             */\n            function addMessageListener() {\n                window.addEventListener('message', (event) => {\n                    if (event.origin !== lmsSelectorUrl) {\n                        return;\n                    }\n                    const importObj = JSON.parse(event.data);\n                    const isGraded = importObj.isGraded !== false;\n                    try {\n                        courseController.setCourse(importObj.path_to_coursefile);\n                        langController.setLanguage(importObj.language);\n                        taskController.setSelection(importObj.link + '?lang=' + importObj.language);\n                        taskController.setIsGraded(isGraded);\n                        sendSuccess();\n                        window.focus();\n                        displayProblemSelectedMessage();\n                    } catch (error) {\n                        sendFailure(error.message);\n                    }\n                  }, false);\n            }\n\n            /**\n             * Display a success message in Moodle that a problem was successfully selected.\n             */\n            function displayProblemSelectedMessage() {\n                require(['core/str', \"core/notification\"], function(str, notification) {\n                    str.get_strings([{\n                        'key': 'mumie_form_updated_selection',\n                        component: 'mod_mumie'\n                    }]).done(function(s) {\n                        notification.addNotification({\n                            message: s[0],\n                            type: \"info\"\n                        });\n                    }).fail(notification.exception);\n                });\n            }\n\n            return {\n                init: function() {\n                    const gradingType = taskController.getGradingType();\n                    problemSelectorButton.onclick = function() {\n                        problemSelectorWindow = window.open(\n                            lmsSelectorUrl\n                                + '/lms-problem-selector?'\n                                + 'org='\n                                + mumieOrg\n                                + '&serverUrl='\n                                + encodeURIComponent(serverController.getSelectedServer().urlprefix)\n                                + '&problemLang='\n                                + langController.getSelectedLanguage()\n                                + '&origin=' + encodeURIComponent(window.location.origin)\n                                + '&uiLang=' + systemLanguage\n                                + '&gradingType=' + gradingType\n                                + '&multiCourse=true'\n                            , '_blank'\n                        );\n                    };\n\n                    window.onclose = function() {\n                        sendSuccess();\n                    };\n\n                    window.addEventListener(\"beforeunload\", function() {\n                        sendSuccess();\n                     }, false);\n\n                    addMessageListener();\n                },\n                disable: function() {\n                    problemSelectorButton.disabled = true;\n                }\n            };\n        })();\n\n        const courseController = (function() {\n            const courseNameElem = document.getElementById(\"id_mumie_course\");\n            const coursefileElem = document.getElementsByName(\"mumie_coursefile\")[0];\n\n\n            /**\n             * Update the hidden input field with the selected course's course file path\n             *\n             * @param {string} coursefile\n             */\n            function updateCoursefilePath(coursefile) {\n                coursefileElem.value = coursefile;\n                updateCourseName();\n            }\n\n            /**\n             * Update displayed course name.\n             */\n            function updateCourseName() {\n                const selectedCourse = courseController.getSelectedCourse();\n                const selectedLanguage = langController.getSelectedLanguage();\n                if (!selectedCourse || !selectedLanguage) {\n                    return;\n                }\n                courseNameElem.value = selectedCourse.name\n                    .find(translation => translation.language === selectedLanguage)?.value;\n            }\n\n            return {\n                init: function() {\n                    updateCourseName();\n                },\n                getSelectedCourse: function() {\n                    const courses = serverController.getSelectedServer().courses;\n                    return courses.find(course => course.coursefile === coursefileElem.value);\n                },\n                updateCourseName: function() {\n                    updateCourseName();\n                },\n                setCourse: function(courseFile) {\n                    updateCoursefilePath(courseFile);\n                }\n            };\n        })();\n\n        const langController = (function() {\n            const languageElem = document.getElementById(\"id_language\");\n\n            /**\n             * Check if the given language exists in the currently selected course.\n             * @param {string} lang\n             * @returns {boolean} Whether the language exists\n             */\n            function languageExists(lang) {\n                return courseController.getSelectedCourse().languages.includes(lang);\n            }\n            return {\n                getSelectedLanguage: function() {\n                    return languageElem.value;\n                },\n                setLanguage: function(lang) {\n                    if (!languageExists(lang)) {\n                        throw new Error(\"Selected language not available\");\n                    }\n                    languageElem.value = lang;\n                    courseController.updateCourseName();\n                }\n            };\n        })();\n\n        const taskController = (function() {\n            const taskSelectionInput = document.getElementsByName(\"taskurl\")[0];\n            const nameElem = document.getElementById(\"id_name\");\n            const taskDisplayElement = document.getElementById(\"id_task_display_element\");\n            const isGradedElem = document.getElementById('id_mumie_isgraded');\n\n\n            /**\n             * Update the activity's name in the input field\n             */\n            function updateName() {\n                const newHeadline = getHeadline(taskController.getSelectedTask());\n                if (!isCustomName()) {\n                    nameElem.value = newHeadline;\n                }\n                taskDisplayElement.value = newHeadline;\n            }\n\n            /**\n             * Check whether the activity has a custom name\n             *\n             * @return {boolean} True, if there is no headline with that name in all tasks\n             */\n            function isCustomName() {\n                if (nameElem.value.length === 0) {\n                    return false;\n                }\n                return !getAllHeadlines().includes(nameElem.value);\n            }\n\n            /**\n             * Get the task's headline for the currently selected language\n             * @param {Object} task\n             * @returns  {string|null} the headline\n             */\n            function getHeadline(task) {\n                if (!task) {\n                    return null;\n                }\n                const selectedLanguage = langController.getSelectedLanguage();\n                const headlineWrapper = task.headline.find(localHeadline => localHeadline.language === selectedLanguage);\n                return headlineWrapper ? headlineWrapper.name : null;\n            }\n\n            /**\n             * Get all tasks that are available on all servers\n             *\n             * @return {Object} Array containing all available tasks\n             */\n            function getAllTasks() {\n                return serverController.getAllServers()\n                    .flatMap(server => server.courses)\n                    .flatMap(course => course.tasks);\n            }\n\n            /**\n             * Get all possible headlines in all languages\n             * @returns {Object} Array containing all headlines\n             */\n            function getAllHeadlines() {\n                return getAllTasks().flatMap(task => task.headline)\n                    .map(headline => headline.name)\n                    .concat(courseController.getSelectedCourse().name.map(n => n.value));\n            }\n\n            /**\n             * Add language parameter to the task's link to display content in the selected language\n             * @param {Object} task\n             * @returns {string}\n             */\n            function getLocalizedLinkFromTask(task) {\n                return getLocalizedLink(task.link);\n            }\n\n            /**\n             * Add language parameter to link\n             * @param {string} link\n             * @returns {string}\n             */\n            function getLocalizedLink(link) {\n                return link + \"?lang=\" + langController.getSelectedLanguage();\n            }\n\n            /**\n             * Form inputs related to grades should be disabled, if the MUMIE Task is not graded.\n             */\n            function updateGradeEditability() {\n                const disabled = isGradedElem.value === '0';\n                document.getElementById('id_points').disabled = disabled;\n                document.getElementById('id_gradepass').disabled = disabled;\n                document.getElementById('id_duedate_enabled').disabled = disabled;\n                document.getElementById('id_gradecat').disabled = disabled;\n            }\n\n            /**\n             * Get a task that links to a course's overview page\n             * @param {Object} course\n             * @returns {Object} task\n             */\n            function getPseudoTaskFromCourse(course) {\n                var headline = [];\n                for (var i in course.name) {\n                    var name = course.name[i];\n                    headline.push({\n                        \"name\": name.value,\n                        \"language\": name.language\n                    });\n                }\n                return {\n                    \"link\": course.link,\n                    \"headline\": headline\n                };\n            }\n\n            return {\n                init: function() {\n                    updateName();\n                },\n                getSelectedTask: function() {\n                    const selectedLink = taskSelectionInput.value;\n                    const selectedCourse = courseController.getSelectedCourse();\n                    if (!selectedCourse) {\n                        return null;\n                    }\n                    const tasks = selectedCourse\n                        .tasks\n                        .slice();\n                    tasks.push(getPseudoTaskFromCourse(selectedCourse));\n                    return tasks\n                        .find(task => getLocalizedLinkFromTask(task) === selectedLink);\n                },\n                setSelection: function(newSelection) {\n                    taskSelectionInput.value = newSelection;\n                    updateName();\n                },\n                setIsGraded: function(isGraded) {\n                    if (isGraded === null) {\n                        isGradedElem.value = null;\n                    }\n                    isGradedElem.value = isGraded ? '1' : '0';\n                    updateGradeEditability();\n                },\n                getGradingType: function() {\n                    const isGraded = isGradedElem.value;\n                    if (isGraded === '1') {\n                        return 'graded';\n                    } else if (isGraded === '0') {\n                        return 'ungraded';\n                    }\n                    return 'all';\n                }\n            };\n        })();\n\n\n        const multiTaskEditController = (function() {\n            const propertySelectionInputs = document.getElementsByName(\"mumie_multi_edit_property\");\n            const selectedTaskProperties = document.getElementsByName(\"mumie_selected_task_properties\")[0];\n            let selectedTaskProp = [];\n            const taskSelectionInputs = document.getElementsByName(\"mumie_multi_edit_task\");\n            const selectedTasks = document.getElementsByName(\"mumie_selected_tasks\")[0];\n            let selectedTaskIds = [];\n            const sectionInputs = document.getElementsByName(\"mumie_multi_edit_section\");\n\n            /**\n             * Push an element to an array, if it's not already included.\n             *\n             * @param {string[]} array\n             * @param {string} element\n             */\n            function pushIfNotExists(array, element) {\n                if (!array.includes(element)) {\n                    array.push(element);\n                }\n            }\n\n            /**\n             * Set selection listeners for other MUMIE Tasks in the course.\n             */\n            function setTaskSelectionListeners() {\n                taskSelectionInputs.forEach(function(checkbox) {\n                    checkbox.onchange = function() {\n                        if (!checkbox.checked) {\n                            selectedTaskIds = selectedTaskIds.filter(elem => elem !== checkbox.value);\n                        } else {\n                            selectedTaskIds.push(checkbox.value);\n                        }\n                        selectedTasks.value = JSON.stringify(selectedTaskIds);\n                    };\n                });\n            }\n\n            /**\n             * Set selection listeners for properties to apply to MUMIE Tasks in the course.\n             */\n            function setPropertySelectionListeners() {\n                propertySelectionInputs.forEach(function(checkbox) {\n                    checkbox.onchange = function() {\n                        if (!checkbox.checked) {\n                            selectedTaskProp = selectedTaskProp.filter(elem => elem !== checkbox.value);\n                        } else {\n                            selectedTaskProp.push(checkbox.value);\n                        }\n                        selectedTaskProperties.value = JSON.stringify(selectedTaskProp);\n                    };\n                });\n            }\n\n            /**\n             * Set selection listeners for entire section of MUMIE Tasks in the course\n             */\n            function setSectionSelectionListeners() {\n                sectionInputs.forEach(function(sectionCheckbox) {\n                    sectionCheckbox.onchange = function() {\n                        if (!sectionCheckbox.checked) {\n                            taskSelectionInputs.forEach(function(taskCheckbox) {\n                                if (taskCheckbox.getAttribute('section') === sectionCheckbox.value) {\n                                    taskCheckbox.checked = false;\n                                    selectedTaskIds = selectedTaskIds.filter(elem => taskCheckbox.value !== elem);\n                                }\n                            });\n                        } else {\n                            taskSelectionInputs.forEach(function(taskCheckbox) {\n                                if (taskCheckbox.getAttribute('section') === sectionCheckbox.value) {\n                                    taskCheckbox.checked = true;\n                                    pushIfNotExists(selectedTaskIds, taskCheckbox.value);\n                                }\n                            });\n                        }\n                        selectedTasks.value = JSON.stringify(selectedTaskIds);\n                    };\n                });\n            }\n\n            return {\n                init: function() {\n                    setTaskSelectionListeners();\n                    setPropertySelectionListeners();\n                    setSectionSelectionListeners();\n                },\n            };\n        })();\n\n        /**\n         *  Disable all dropdown menus and show notification\n         * @param {string} errorKey\n         */\n        function disableDropDownMenus(errorKey) {\n            require(['core/str', \"core/notification\"], function(str, notification) {\n                str.get_strings([{\n                    'key':  errorKey,\n                    component: 'mod_mumie'\n                }]).done(function(s) {\n                    notification.addNotification({\n                        message: s[0] + \"<b>\" + missingConfig.getAttribute(\"value\") + \"</b>\",\n                        type: \"problem\"\n                    });\n                }).fail(notification.exception);\n            });\n            serverController.disable();\n            problemSelectorController.disable();\n        }\n\n        return {\n            init: function(contextid, prbSelectorUrl, lang) {\n                lmsSelectorUrl = prbSelectorUrl;\n                systemLanguage = lang;\n                const isEdit = document.getElementById(\"id_name\").getAttribute('value');\n                const serverStructure = JSON.parse(document.getElementsByName('mumie_server_structure')[0].value);\n                if (isEdit && !serverConfigExists()) {\n                    disableDropDownMenus('mumie_form_missing_server');\n                } else if (!serverStructure.length) {\n                    disableDropDownMenus('mumie_form_no_server_conf');\n                } else {\n                    serverController.init(serverStructure);\n                    courseController.init();\n                    taskController.init(isEdit);\n                    multiTaskEditController.init();\n                    problemSelectorController.init();\n                }\n                multiTaskEditController.init();\n                if (addServerButton) {\n                    require(['auth_mumie/mumie_server_config'], function(MumieServer) {\n                        MumieServer.init(addServerButton, contextid);\n                    });\n                }\n            }\n        };\n\n        /**\n         * Remove all child elements of a given html element\n         * @param {Object} elem\n         */\n        function removeChildElems(elem) {\n            while (elem.firstChild) {\n                elem.removeChild(elem.firstChild);\n            }\n        }\n\n        /**\n         * Check, if the flag for an existing config is set\n         * @returns {boolean}\n         */\n        function serverConfigExists() {\n            return document.getElementsByName(\"mumie_missing_config\")[0].getAttribute(\"value\") === \"\";\n        }\n    });\n"],"names":["define","lmsSelectorUrl","systemLanguage","serverStructure","serverDropDown","languageElem","propertySelectionInputs","selectedTaskProperties","selectedTaskProp","taskSelectionInputs","selectedTasks","selectedTaskIds","sectionInputs","addServerButton","document","getElementById","missingConfig","getElementsByName","serverController","init","structure","getSelectedServer","selectedServerName","options","selectedIndex","text","find","server","name","disable","disabled","removeChildElems","elem","firstChild","removeChild","getAllServers","problemSelectorController","problemSelectorWindow","problemSelectorButton","mumieOrg","value","sendResponse","response","postMessage","JSON","stringify","sendSuccess","message","success","addMessageListener","window","addEventListener","event","origin","importObj","parse","data","isGraded","courseController","setCourse","path_to_coursefile","langController","setLanguage","language","taskController","setSelection","link","setIsGraded","focus","require","str","notification","get_strings","key","component","done","s","addNotification","type","fail","exception","error","sendFailure","gradingType","getGradingType","onclick","open","encodeURIComponent","urlprefix","getSelectedLanguage","location","onclose","courseNameElem","coursefileElem","updateCourseName","_selectedCourse$name$","selectedCourse","getSelectedCourse","selectedLanguage","translation","courses","course","coursefile","courseFile","updateCoursefilePath","lang","languageExists","languages","includes","Error","taskSelectionInput","nameElem","taskDisplayElement","isGradedElem","updateName","newHeadline","getHeadline","task","headlineWrapper","headline","localHeadline","getSelectedTask","length","flatMap","tasks","map","concat","n","isCustomName","getLocalizedLinkFromTask","selectedLink","slice","push","getPseudoTaskFromCourse","i","newSelection","multiTaskEditController","forEach","checkbox","onchange","checked","filter","sectionCheckbox","taskCheckbox","array","element","getAttribute","disableDropDownMenus","errorKey","contextid","prbSelectorUrl","isEdit","MumieServer"],"mappings":"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"}